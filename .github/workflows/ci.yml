---
name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"  # Triggers when a new version tag (e.g., v1.0.0) is pushed.

jobs:
  validate-action:
    name: Validate GitHub Action
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate action.yml
        uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  validate-yaml:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml

  test-action:
    name: Test GitHub Action
    runs-on: ubuntu-latest
    needs: [validate-action, validate-yaml]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Root.io Remediation Action
        id: remediation
        uses: ./
        with:
          org_id: ${{ secrets.ROOTIO_ORG_ID }}
          api_token: ${{ secrets.ROOTIO_API_TOKEN }}
          registry_credentials_id: ${{ secrets.ROOTIO_REGISTRY_CREDENTIALS }}
          image_reference: ${{ secrets.ROOTIO_IMAGE_REFERENCE }}

      - name: Test action outputs
        shell: bash
        run: |
          echo "Testing action outputs:"
          echo "process_status: '${{ steps.remediation.outputs.process_status }}'"
          echo "result_image: '${{ steps.remediation.outputs.result_image }}'"
          echo "remediation_status: '${{ steps.remediation.outputs.remediation_status }}'"
          echo "id: '${{ steps.remediation.outputs.id }}'"
          echo "remediation_decision: '${{ steps.remediation.outputs.remediation_decision }}'"
          echo "remediation_error: '${{ steps.remediation.outputs.remediation_error }}'"
          echo "image_created: '${{ steps.remediation.outputs.image_created }}'"
          
          # Verify outputs have expected values
          if [ "${{ steps.remediation.outputs.process_status }}" != "success" ]; then
            echo "ERROR: process_status should be 'success', got '${{ steps.remediation.outputs.process_status }}'"
            exit 1
          fi
          
          if [ -z "${{ steps.remediation.outputs.id }}" ] || [[ ! "${{ steps.remediation.outputs.id }}" =~ ^scn_[a-f0-9]{32}$ ]]; then
            echo "ERROR: id should match pattern 'scn_[32 hex chars]', got '${{ steps.remediation.outputs.id }}'"
            exit 1
          fi
          
          if [ "${{ steps.remediation.outputs.remediation_status }}" != "image_remediation_status_success" ]; then
            echo "ERROR: remediation_status should be 'image_remediation_status_success', got '${{ steps.remediation.outputs.remediation_status }}'"
            exit 1
          fi
          
          if [ "${{ steps.remediation.outputs.remediation_decision }}" != "image_remediation_decision_patch" ]; then
            echo "ERROR: remediation_decision should be 'image_remediation_decision_patch', got '${{ steps.remediation.outputs.remediation_decision }}'"
            exit 1
          fi
          
          if [ "${{ steps.remediation.outputs.result_image }}" != "***_rootio" ]; then
            echo "ERROR: result_image should be '***_rootio', got '${{ steps.remediation.outputs.result_image }}'"
            exit 1
          fi
          
          if [ "${{ steps.remediation.outputs.image_created }}" != "true" ]; then
            echo "ERROR: image_created should be 'true', got '${{ steps.remediation.outputs.image_created }}'"
            exit 1
          fi
          
          echo "All output tests passed!"

  release:
    name: Publish to GitHub Marketplace
    runs-on: ubuntu-latest
    needs: [test-action]  # Only runs if tests pass
    if: startsWith(github.ref, 'refs/tags/v')  # Ensures it only runs on new version tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release
            - [ ] Add release notes manually or automate them.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Version Tag
        run: |
          git tag -f latest
          git push origin latest --force
